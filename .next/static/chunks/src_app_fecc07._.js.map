{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/app/components/risk-managment/RiskRatingMatrix.jsx"],"sourcesContent":["\"use client\"\r\nimport React, { useState } from 'react';\r\nimport {\r\n  Box,\r\n  Paper,\r\n  Typography,\r\n  Grid,\r\n  Chip,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Card,\r\n  CardContent,\r\n  Tooltip\r\n} from '@mui/material';\r\nimport { on } from 'events';\r\n\r\nconst PBTRiskMatrix = ({onChange}) => {\r\n  const [selectedProbability, setSelectedProbability] = useState(null);\r\n  const [selectedImpact, setSelectedImpact] = useState(null);\r\n  const [selectedRisk, setSelectedRisk] = useState(null);\r\n  const [result, setResult] = useState(\r\n    { probability: null, impact: null, risk: null, color: null }\r\n  );\r\n\r\n\r\n  // Risk matrix data\r\n  const probabilityLevels = [\r\n    { id: 5, label: 'Almost Certain', color: '#8B5CF6' },\r\n    { id: 4, label: 'Likely', color: '#10B981' },\r\n    { id: 3, label: 'Possible', color: '#F59E0B' },\r\n    { id: 2, label: 'Unlikely', color: '#10B981' },\r\n    { id: 1, label: 'Rare', color: '#059669' }\r\n  ];\r\n\r\n  const impactLevels = [\r\n    { id: 1, label: 'Insignificant', color: '#059669' },\r\n    { id: 2, label: 'Low', color: '#10B981' },\r\n    { id: 3, label: 'Significant', color: '#F59E0B' },\r\n    { id: 4, label: 'Serious', color: '#F97316' },\r\n    { id: 5, label: 'Catastrophic', color: '#DC2626' }\r\n  ];\r\n\r\n  // Risk matrix cells with their corresponding risk levels\r\n  const riskMatrix = [\r\n    [\r\n      { risk: 'Low', color: '#10B981' },\r\n      { risk: 'Moderate', color: '#F59E0B' },\r\n      { risk: 'High', color: '#F97316' },\r\n      { risk: 'High', color: '#F97316' },\r\n      { risk: 'Critical', color: '#DC2626' }\r\n    ],\r\n    [\r\n      { risk: 'Low', color: '#10B981' },\r\n      { risk: 'Moderate', color: '#F59E0B' },\r\n      { risk: 'Moderate', color: '#F59E0B' },\r\n      { risk: 'High', color: '#F97316' },\r\n      { risk: 'Critical', color: '#DC2626' }\r\n    ],\r\n    [\r\n      { risk: 'Negligible', color: '#059669' },\r\n      { risk: 'Low', color: '#10B981' },\r\n      { risk: 'Moderate', color: '#F59E0B' },\r\n      { risk: 'Moderate', color: '#F59E0B' },\r\n      { risk: 'High', color: '#F97316' }\r\n    ],\r\n    [\r\n      { risk: 'Negligible', color: '#059669' },\r\n      { risk: 'Negligible', color: '#059669' },\r\n      { risk: 'Low', color: '#10B981' },\r\n      { risk: 'Moderate', color: '#F59E0B' },\r\n      { risk: 'Moderate', color: '#F59E0B' }\r\n    ],\r\n    [\r\n      { risk: 'Negligible', color: '#059669' },\r\n      { risk: 'Negligible', color: '#059669' },\r\n      { risk: 'Negligible', color: '#059669' },\r\n      { risk: 'Low', color: '#10B981' },\r\n      { risk: 'Low', color: '#10B981' }\r\n    ]\r\n  ];\r\n\r\n  const riskColors = {\r\n    'Negligible': '#059669',\r\n    'Low': '#059669',\r\n    'Moderate': '#10B981',\r\n    'High': '#F59E0B',\r\n    'Critical': '#DC2626'\r\n  };\r\n\r\n  const handleCellClick = (probIndex, impactIndex) => {\r\n    const cell = riskMatrix[probIndex][impactIndex];\r\n    setSelectedProbability(probIndex + 1);\r\n    setSelectedImpact(impactIndex + 1);\r\n    setSelectedRisk(cell);\r\n    onChange({\r\n      probability: probIndex + 1,\r\n      impact: impactIndex + 1,\r\n      risk: cell.risk,\r\n      color: cell.color\r\n    });\r\n  };\r\n\r\n  const handleProbabilitySelect = (probId) => {\r\n    setSelectedProbability(probId);\r\n    if (selectedImpact) {\r\n      const cell = riskMatrix[5 - probId][selectedImpact - 1];\r\n      setSelectedRisk(cell);\r\n    }\r\n    onChange({\r\n      probability: probId,\r\n      impact: selectedImpact,\r\n      risk: selectedRisk ? selectedRisk.risk : null,\r\n      color: selectedRisk ? selectedRisk.color : null\r\n    });\r\n  };\r\n\r\n  const handleImpactSelect = (impactId) => {\r\n    setSelectedImpact(impactId);\r\n    if (selectedProbability) {\r\n      const cell = riskMatrix[5 - selectedProbability][impactId - 1];\r\n      setSelectedRisk(cell);\r\n    }\r\n    onChange({\r\n      probability: selectedProbability,\r\n      impact: impactId,\r\n      risk: selectedRisk ? selectedRisk.risk : null,\r\n      color: selectedRisk ? selectedRisk.color : null\r\n    });\r\n  };\r\n\r\n  const getRiskRating = () => {\r\n    if (!selectedRisk) return null;\r\n    return selectedRisk.risk;\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ p: 3, maxWidth: 1200, mx: 'auto' }}>\r\n      <Typography variant=\"h4\" gutterBottom align=\"center\" sx={{ mb: 4 }}>\r\n        Risk Matrix - Based on PBT\r\n      </Typography>\r\n\r\n      {/* Selection Controls */}\r\n      <Grid container spacing={3} sx={{ mb: 4 }}>\r\n        <Grid item xs={12} md={6}>\r\n          <FormControl fullWidth>\r\n            <InputLabel>Probability</InputLabel>\r\n            <Select\r\n              value={selectedProbability || ''}\r\n              label=\"Probability\"\r\n              onChange={(e) => handleProbabilitySelect(e.target.value)}\r\n            >\r\n              {probabilityLevels.map((level) => (\r\n                <MenuItem key={level.id} value={level.id}>\r\n                  {level.id} - {level.label}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <FormControl fullWidth>\r\n            <InputLabel>Impact</InputLabel>\r\n            <Select\r\n              value={selectedImpact || ''}\r\n              label=\"Impact\"\r\n              onChange={(e) => handleImpactSelect(e.target.value)}\r\n            >\r\n              {impactLevels.map((level) => (\r\n                <MenuItem key={level.id} value={level.id}>\r\n                  {level.id} - {level.label}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Risk Rating Display */}\r\n      {selectedRisk && (\r\n        <Card sx={{ mb: 4, bgcolor: riskColors[selectedRisk.risk], color: 'white' }}>\r\n          <CardContent>\r\n            <Typography variant=\"h5\" align=\"center\">\r\n              Risk Rating: {getRiskRating()}\r\n            </Typography>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Risk Matrix */}\r\n      <Paper elevation={3} sx={{ p: 2 }}>\r\n        <Grid container>\r\n          {/* Y-axis labels */}\r\n          <Grid item xs={2}>\r\n            <Box sx={{ height: '100%', display: 'flex', flexDirection: 'column-reverse' }}>\r\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', height: 60 }}>\r\n                <Typography variant=\"body2\" sx={{ transform: 'rotate(-90deg)', whiteSpace: 'nowrap' }}>\r\n                  Probability\r\n                </Typography>\r\n              </Box>\r\n              {probabilityLevels.map((level, index) => (\r\n                <Box\r\n                  key={level.id}\r\n                  sx={{\r\n                    height: 60,\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    cursor: 'pointer',\r\n                    backgroundColor: selectedProbability === level.id ? level.color : 'transparent',\r\n                    color: selectedProbability === level.id ? 'white' : 'text.primary',\r\n                    '&:hover': { backgroundColor: level.color, color: 'white' },\r\n                    transition: 'all 0.2s'\r\n                  }}\r\n                  onClick={() => handleProbabilitySelect(level.id)}\r\n                >\r\n                  <Tooltip title={level.range}>\r\n                    <Typography variant=\"caption\" sx={{ textAlign: 'center', fontSize: '0.7rem' }}>\r\n                      {level.id} - {level.label}\r\n                    </Typography>\r\n                  </Tooltip>\r\n                </Box>\r\n              ))}\r\n            </Box>\r\n          </Grid>\r\n\r\n          {/* Matrix cells */}\r\n          <Grid item xs={10}>\r\n            <Box>\r\n              {/* Matrix grid */}\r\n              {riskMatrix.map((row, rowIndex) => (\r\n                <Box key={rowIndex} sx={{ display: 'flex' }}>\r\n                  {row.map((cell, colIndex) => (\r\n                    <Box\r\n                      key={`${rowIndex}-${colIndex}`}\r\n                      sx={{\r\n                        width: 120,\r\n                        height: 60,\r\n                        border: '1px solid #ccc',\r\n                        backgroundColor: cell.color,\r\n                        color: 'white',\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        justifyContent: 'center',\r\n                        cursor: 'pointer',\r\n                        opacity: selectedProbability === (5 - rowIndex) && selectedImpact === (colIndex + 1) ? 1 : 0.8,\r\n                        transform: selectedProbability === (5 - rowIndex) && selectedImpact === (colIndex + 1) ? 'scale(1.05)' : 'scale(1)',\r\n                        transition: 'all 0.2s',\r\n                        '&:hover': {\r\n                          transform: 'scale(1.05)',\r\n                          opacity: 1,\r\n                          zIndex: 1\r\n                        }\r\n                      }}\r\n                      onClick={() => handleCellClick(rowIndex, colIndex)}\r\n                    >\r\n                      <Tooltip title={`Risk: ${cell.risk}`}>\r\n                        <Typography variant=\"caption\" sx={{ textAlign: 'center', fontSize: '0.75rem', fontWeight: 'bold' }}>\r\n                          {cell.risk}\r\n                        </Typography>\r\n                      </Tooltip>\r\n                    </Box>\r\n                  ))}\r\n                </Box>\r\n              ))}\r\n\r\n              {/* X-axis labels */}\r\n              <Box sx={{ display: 'flex', mt: 1 }}>\r\n                {impactLevels.map((level) => (\r\n                  <Box\r\n                    key={level.id}\r\n                    sx={{\r\n                      width: 120,\r\n                      height: 40,\r\n                      display: 'flex',\r\n                      alignItems: 'center',\r\n                      justifyContent: 'center',\r\n                      cursor: 'pointer',\r\n                      backgroundColor: selectedImpact === level.id ? level.color : 'transparent',\r\n                      color: selectedImpact === level.id ? 'white' : 'text.primary',\r\n                      '&:hover': { backgroundColor: level.color, color: 'white' },\r\n                      transition: 'all 0.2s'\r\n                    }}\r\n                    onClick={() => handleImpactSelect(level.id)}\r\n                  >\r\n                    <Typography variant=\"caption\" sx={{ textAlign: 'center', fontSize: '0.7rem' }}>\r\n                      {level.id} - {level.label}\r\n                    </Typography>\r\n                  </Box>\r\n                ))}\r\n              </Box>\r\n              <Typography variant=\"body2\" sx={{ textAlign: 'center', mt: 1 }}>\r\n                Impact\r\n              </Typography>\r\n            </Box>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        {/* Legend */}\r\n        <Box sx={{ mt: 3, display: 'flex', justifyContent: 'center', gap: 1, flexWrap: 'wrap' }}>\r\n          {Object.entries(riskColors).map(([risk, color]) => (\r\n            <Chip\r\n              key={risk}\r\n              label={risk}\r\n              sx={{\r\n                backgroundColor: color,\r\n                color: 'white',\r\n                fontWeight: 'bold'\r\n              }}\r\n            />\r\n          ))}\r\n        </Box>\r\n\r\n        {/* Risk numbering */}\r\n        <Box sx={{ mt: 2, display: 'flex', justifyContent: 'center', gap: 2 }}>\r\n          <Typography variant=\"caption\" color=\"error\">1</Typography>\r\n          <Typography variant=\"caption\" color=\"warning.main\">2</Typography>\r\n          <Typography variant=\"caption\" color=\"info.main\">3</Typography>\r\n          <Typography variant=\"caption\" color=\"warning.main\">5</Typography>\r\n          <Typography variant=\"caption\" color=\"error\">8</Typography>\r\n        </Box>\r\n      </Paper>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default PBTRiskMatrix;"],"names":[],"mappings":"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"}},
    {"offset": {"line": 749, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 754, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/app/(DashboardLayout)/risk-managment/create-risk/[id]/page.jsx"],"sourcesContent":["\"use client\";\r\nimport * as React from 'react';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { useParams, useRouter } from 'next/navigation';\r\nimport { \r\n  Box, \r\n  Button, \r\n  Typography, \r\n  TextField, \r\n  Grid, \r\n  Paper,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Checkbox,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  Divider,\r\n  Chip,\r\n  Avatar,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Snackbar,\r\n  Alert,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  TablePagination,\r\n  IconButton,\r\n  Tooltip,\r\n  Slider,\r\n  InputAdornment,\r\n  Tabs,\r\n  Tab,\r\n  LinearProgress,\r\n  ListItemText\r\n} from '@mui/material';\r\nimport { \r\n  IconArrowLeft, \r\n  IconCheck, \r\n  IconPlus, \r\n  IconX,\r\n  IconTrash,\r\n  IconEdit,\r\n  IconSearch,\r\n  IconDeviceFloppy,\r\n  IconArrowRight\r\n} from '@tabler/icons-react';\r\nimport PBTRiskMatrix from '@/app/components/risk-managment/RiskRatingMatrix';\r\n\r\n// API Service\r\nconst apiBaseUrl = 'http://4.222.232.224/api/v1';\r\n\r\nasync function fetchData(endpoint) {\r\n  const response = await fetch(`${apiBaseUrl}${endpoint}`);\r\n  if (!response.ok) throw new Error('Network response was not ok');\r\n  return response.json();\r\n}\r\n\r\nasync function postData(endpoint, data) {\r\n  const response = await fetch(`${apiBaseUrl}${endpoint}`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'accept': '*/*'\r\n    },\r\n    body: JSON.stringify(data)\r\n  });\r\n  if (!response.ok) throw new Error('Network response was not ok');\r\n  return response.json();\r\n}\r\n\r\nasync function putData(endpoint, data) {\r\n  const response = await fetch(`${apiBaseUrl}${endpoint}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'accept': '*/*'\r\n    },\r\n    body: JSON.stringify(data)\r\n  });\r\n  if (!response.ok) throw new Error('Network response was not ok');\r\n  return response.json();\r\n}\r\n\r\nconst AddRiskForm = () => {\r\n  const theme = useTheme();\r\n  const router = useRouter();\r\n  const params = useParams();\r\n  const [activeTab, setActiveTab] = React.useState(0);\r\n  const [snackbar, setSnackbar] = React.useState({ open: false, message: '', severity: 'success' });\r\n  const [isLoading, setIsLoading] = React.useState(false);\r\n  const [riskId, setRiskId] = React.useState(null);\r\n  const [isDraftCreated, setIsDraftCreated] = React.useState(false);\r\n  \r\n  // Data states\r\n  const [riskCategories, setRiskCategories] = React.useState([]);\r\n  const [users, setUsers] = React.useState([]);\r\n  const [controls, setControls] = React.useState([]);\r\n  const [incidents, setIncidents] = React.useState([]);\r\n  const [businessUnits, setBusinessUnits] = React.useState([]);\r\n  const [incidentStatuses, setIncidentStatuses] = React.useState([]);\r\n  // Modal states\r\n  const [openControlModal, setOpenControlModal] = React.useState(false);\r\n  const [openIncidentModal, setOpenIncidentModal] = React.useState(false);\r\n\r\n\r\n  const handleRiskRatingResult = (result) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      inherentProbability: result.probability,\r\n      inherentImpact: result.impact\r\n    }));\r\n    // setSnackbar({ open: true, message: 'Risk rating updated successfully', severity: 'success' });\r\n  };\r\n  // New entity states\r\n  const [newControl, setNewControl] = React.useState({\r\n    riskId: params.id,\r\n    name: '',\r\n    description: '',\r\n    controlType: 'PREVENTIVE',\r\n    controlNature: 'MANUAL',\r\n    status:'PLANNED',\r\n    effectiveness: 50,\r\n    ongoingCost:0,\r\n    implementationDate:new Date().toISOString().split('T')[0],\r\n    targetCompletionDate:new Date().toISOString().split('T')[0],\r\n    reviewFrequency: 1,\r\n    operatingProcedure:'',\r\n    testingProcedure:'',\r\n    automated:false,\r\n    limitations:'',\r\n    dependencies:'',\r\n    ownerId: 0\r\n  });\r\n  \r\n  const [newIncident, setNewIncident] = React.useState({\r\n    title: '',\r\n    description: '',\r\n    severity: 'MEDIUM',\r\n    financialLoss: 0,\r\n    reporterId: 0,\r\n    incidentId: `INC-${Math.random().toString(36).substring(2, 15)}`, // To be replaced with actual incident ID logic\r\n    riskId: params.id,\r\n  status: \"\",\r\n  incidentDate: \"\",\r\n  detectedDate: \"\",\r\n  reportedDate: \"\",\r\n  reporterId: 1,\r\n  assignedToId: 1,\r\n  financialLoss: 0,\r\n  rootCause: \"\",\r\n  immediateActions: \"\",\r\n  regulatoryNotificationRequired: true,\r\n  customerImpact: true,\r\n  customerImpactDescription: \"\",\r\n  affectedBusinessUnitIds: [\r\n  ]\r\n  });\r\n  const primaryRisk =[\r\n  \"STRATEGIC_RISK\",\r\n  \"OPERATIONAL_RISK\",\r\n  \"PEOPLE_RISK\",\r\n  \"FINANCIAL_RISK\",\r\n  \"COMPLIANCE_RISK\",\r\n  \"TECHNOLOGY_RISK\",\r\n  \"REPUTATIONAL_RISK\",\r\n  \"CYBER_SECURITY_RISK\",\r\n  \"MARKET_RISK\",\r\n  \"CREDIT_RISK\",\r\n  \"LIQUIDITY_RISK\",\r\n  \"DATA_PRIVACY_RISK\",\r\n  \"LEGAL_RISK\",\r\n  \"ENVIRONMENTAL_RISK\",\r\n  \"NONE\"\r\n]\r\n\r\n  const secondaryRisk = [\r\n  \"GORVANANCE_RISK\",\r\n  \"FINACIAL_REPORTING_RISK\",\r\n  \"CAPITAL_ADEQUACY_RISK\",\r\n  \"MARKET_RISK\",\r\n  \"EARNINGS_RISK\",\r\n  \"TAXATION_RISK\",\r\n  \"CLIMATE_RELATED_FINANCIAL_RISK\",\r\n  \"STRATEGIC_EXECUTION_RISK\"\r\n]\r\n\r\nconst tertiaryRisk = [\r\n  \"DATA_BREACH\",\r\n  \"SYSTEM_FAILURE\",\r\n  \"REGULATORY_NON_COMPLIANCE\",\r\n  \"SUPPLY_CHAIN_DISRUPTION\",\r\n  \"MARKET_VOLATILITY\",\r\n  \"REPUTATIONAL_DAMAGE\",\r\n  \"OPERATIONAL_RISK\",\r\n  \"FINANCIAL_RISK\",\r\n  \"LEGAL_RISK\",\r\n  \"ENVIRONMENTAL_RISK\",\r\n  \"CYBER_ATTACK\",\r\n  \"NONE\"\r\n]\r\n\r\n  // Form state\r\n  const [formData, setFormData] = React.useState({\r\n    title: '',\r\n    description: '',\r\n    type: 'OPERATIONAL',\r\n    status: 'DRAFT',\r\n    priority: 'MEDIUM',\r\n    primaryRisk: 'PEOPLE_RISK',\r\n    secondaryRisk: 'GORVANANCE_RISK',\r\n    tertiaryRisk: 'DATA_BREACH',\r\n    version: 1,\r\n    categoryId: 0,\r\n    ownerId: 0,\r\n    stakeholderIds: [],\r\n    inherentProbability: 50,\r\n    inherentImpact: 50,\r\n    potentialFinancialImpact: 0,\r\n    currency: 'USD',\r\n    identifiedDate: new Date().toISOString().split('T')[0],\r\n    reviewDate: '',\r\n    nextAssessmentDate: '',\r\n    controlIds: [],\r\n    incidentIds: [],\r\n    affectedBusinessUnitIds: [],\r\n    rootCause: '',\r\n    consequences: '',\r\n    assumptions: '',\r\n    externalFactors: '',\r\n    regulatoryRequirement: false,\r\n    complianceRelated: false\r\n  });\r\n\r\n  // Form errors\r\n  const [errors, setErrors] = React.useState({\r\n    title: false,\r\n    description: false,\r\n    categoryId: false,\r\n    ownerId: false\r\n  });\r\n\r\n  // Pagination states\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n  // Create draft on initial load\r\n  React.useEffect(() => {\r\n    const createDraft = async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        setRiskId(params.id);\r\n        setIsDraftCreated(true);\r\n        \r\n        // Load the draft data\r\n        // const riskData = await fetchData(`/risks/${params.id}`);\r\n        // setFormData(prev => ({\r\n        //   ...prev,\r\n        //   status: 'DRAFT',\r\n        //   riskId: riskData.riskId,\r\n        //   identifiedDate: riskData.identifiedDate || new Date().toISOString().split('T')[0],\r\n        //   description: riskData.description || '',\r\n        //   title: riskData.title || '',\r\n        //   type: riskData.type || 'OPERATIONAL',\r\n        //   categoryId: riskData.categoryId || 0,\r\n        //   ownerId: riskData.ownerId || 0,\r\n        //   inherentProbability: riskData.inherentProbability || 50,\r\n        //   inherentImpact: riskData.inherentImpact || 50,\r\n        //   potentialFinancialImpact: riskData.potentialFinancialImpact || 0,\r\n        //   currency: riskData.currency || 'USD',\r\n        //   identifiedDate: riskData.identifiedDate || new Date().toISOString().split('T')[0],\r\n        //   reviewDate: riskData.reviewDate || '',\r\n        //   nextAssessmentDate: riskData.nextAssessmentDate || '',\r\n        //   controlIds: riskData.controlIds || [],\r\n        //   incidentIds: riskData.incidentIds || [],\r\n        //   regulatoryRequirement: riskData.regulatoryRequirement || false,\r\n        //   complianceRelated: riskData.complianceRelated || false,\r\n        //   rootCause: riskData.rootCause || '',\r\n        //   consequences: riskData.consequences || '',\r\n        //   assumptions: riskData.assumptions || '',\r\n        //   externalFactors: riskData.externalFactors || '',\r\n        // }));\r\n        \r\n        // Load other data\r\n        await loadInitialData();\r\n        \r\n      } catch (error) {\r\n        setSnackbar({ open: true, message: 'Failed to create draft: ' + error.message, severity: 'error' });\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    \r\n    if (!isDraftCreated) {\r\n      createDraft();\r\n    }\r\n  }, [isDraftCreated]);\r\n\r\n  const loadInitialData = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n\r\n           const riskData = await fetchData(`/risks/${params.id}`);\r\n        setFormData(prev => ({\r\n          ...prev,\r\n          status: 'DRAFT',\r\n          riskId: riskData.riskId,\r\n          identifiedDate: riskData.identifiedDate || new Date().toISOString().split('T')[0],\r\n          description: riskData.description || '',\r\n          title: riskData.title || '',\r\n          type: riskData.type || 'OPERATIONAL',\r\n          categoryId: riskData.categoryId || 0,\r\n          primaryRisk: riskData.primaryRisk || '',\r\n          secondaryRisk: riskData.secondaryRisk || '',\r\n          tertiaryRisk: riskData.tertiaryRisk || '',\r\n          ownerId: riskData.ownerId || 0,\r\n          inherentProbability: riskData.inherentProbability || 50,\r\n          inherentImpact: riskData.inherentImpact || 50,\r\n          potentialFinancialImpact: riskData.potentialFinancialImpact || 0,\r\n          currency: riskData.currency || 'USD',\r\n          identifiedDate: riskData.identifiedDate || new Date().toISOString().split('T')[0],\r\n          reviewDate: riskData.reviewDate || '',\r\n          nextAssessmentDate: riskData.nextAssessmentDate || '',\r\n          controlIds: riskData.controlIds || [],\r\n          incidentIds: riskData.incidentIds || [],\r\n          regulatoryRequirement: riskData.regulatoryRequirement || false,\r\n          complianceRelated: riskData.complianceRelated || false,\r\n          rootCause: riskData.rootCause || '',\r\n          consequences: riskData.consequences || '',\r\n          assumptions: riskData.assumptions || '',\r\n          externalFactors: riskData.externalFactors || '',\r\n        }));\r\n      \r\n      // Fetch risk categories\r\n      const categories = await fetchData('/risk-categories');\r\n      setRiskCategories(categories.content || []);\r\n      \r\n      // Fetch users\r\n      const usersData = await fetchData('/users');\r\n      setUsers(usersData.content || []);\r\n\r\n      // Fetch incident statuses http://4.222.232.224/api/v1/enums/incident-statuses\r\n      const incidentStatusesData = await fetchData('/enums/incident-statuses');\r\n      setIncidentStatuses(incidentStatusesData || []);\r\n      \r\n      // Fetch controls\r\n      const controlsData = await fetchData('/risk-controls');\r\n      setControls(controlsData.content || []);\r\n      \r\n      // Fetch incidents\r\n      const incidentsData = await fetchData('/incidents');\r\n      setIncidents(incidentsData.content || []);\r\n      \r\n      // Fetch business units\r\n      const businessUnitsData = await fetchData('/business-units');\r\n      setBusinessUnits(businessUnitsData.content || []);\r\n      \r\n    } catch (error) {\r\n      setSnackbar({ open: true, message: 'Failed to load data: ' + error.message, severity: 'error' });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Calculate risk rating\r\n  const calculateRiskRating = () => {\r\n    const score = (formData.inherentProbability * formData.inherentImpact) / 100;\r\n    if (score >= 80) return 'CRITICAL';\r\n    if (score >= 60) return 'HIGH';\r\n    if (score >= 30) return 'MEDIUM';\r\n    return 'LOW';\r\n  };\r\n\r\n  // Handle form changes\r\n  const handleChange = (field) => (event) => {\r\n    const value = event.target.type === 'checkbox' ? event.target.checked : event.target.value;\r\n    setFormData(prev => ({ ...prev, [field]: value }));\r\n    \r\n    // Clear error when field is filled\r\n    if (errors[field] && value) {\r\n      setErrors(prev => ({ ...prev, [field]: false }));\r\n    }\r\n  };\r\n\r\n  // Handle control selection\r\n  const handleControlSelect = (controlId) => {\r\n    setFormData(prev => {\r\n      const controlIds = [...prev.controlIds];\r\n      const index = controlIds.indexOf(controlId);\r\n      \r\n      if (index === -1) {\r\n        controlIds.push(controlId);\r\n      } else {\r\n        controlIds.splice(index, 1);\r\n      }\r\n      \r\n      return { ...prev, controlIds };\r\n    });\r\n  };\r\n\r\n  // Handle incident selection\r\n  const handleIncidentSelect = (incidentId) => {\r\n    setFormData(prev => {\r\n      const incidentIds = [...prev.incidentIds];\r\n      const index = incidentIds.indexOf(incidentId);\r\n      \r\n      if (index === -1) {\r\n        incidentIds.push(incidentId);\r\n      } else {\r\n        incidentIds.splice(index, 1);\r\n      }\r\n      \r\n      return { ...prev, incidentIds };\r\n    });\r\n  };\r\n\r\n  // Handle business unit selection\r\n  const handleBusinessUnitSelect = (unitId) => {\r\n    setFormData(prev => {\r\n      const affectedBusinessUnitIds = [...prev.affectedBusinessUnitIds];\r\n      const index = affectedBusinessUnitIds.indexOf(unitId);\r\n      \r\n      if (index === -1) {\r\n        affectedBusinessUnitIds.push(unitId);\r\n      } else {\r\n        affectedBusinessUnitIds.splice(index, 1);\r\n      }\r\n      \r\n      return { ...prev, affectedBusinessUnitIds };\r\n    });\r\n  };\r\n\r\n  // Add new control\r\n  const handleAddControl = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      const createdControl = await postData('/risk-controls/create', newControl);\r\n      setControls(prev => [...prev, createdControl]);\r\n      setFormData(prev => ({\r\n        ...prev,\r\n        controlIds: [...prev.controlIds, createdControl.id]\r\n      }));\r\n      setOpenControlModal(false);\r\n      setNewControl({\r\n        name: '',\r\n        description: '',\r\n        controlType: 'PREVENTIVE',\r\n        controlNature: 'MANUAL',\r\n        effectiveness: 50,\r\n        ongoingCost: 0,\r\n        implementationDate: new Date().toISOString().split('T')[0],\r\n        targetCompletionDate: new Date().toISOString().split('T')[0],\r\n        reviewFrequency: 1,\r\n        operatingProcedure: '',\r\n        testingProcedure: '',\r\n        automated: false,\r\n        limitations: '',\r\n        dependencies: '',\r\n        ownerId: 0\r\n      });\r\n      setSnackbar({ open: true, message: 'Control added successfully', severity: 'success' });\r\n    } catch (error) {\r\n      setSnackbar({ open: true, message: 'Failed to add control: ' + error.message, severity: 'error' });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Add new incident\r\n  const handleAddIncident = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      const createdIncident = await postData('/incidents/create', newIncident);\r\n      setIncidents(prev => [...prev, createdIncident]);\r\n      setFormData(prev => ({\r\n        ...prev,\r\n        incidentIds: [...prev.incidentIds, createdIncident.id]\r\n      }));\r\n      setOpenIncidentModal(false);\r\n      // Reset new incident form\r\n      setNewIncident({\r\n        title: '',\r\n        description: '',\r\n        severity: 'MEDIUM',\r\n        financialLoss: 0,\r\n        reporterId: 0,\r\n        incidentId: '', \r\n        riskId: params.id,\r\n        status: \"\",\r\n        incidentDate: new Date().toISOString().split('T')[0],\r\n        detectedDate: new Date().toISOString().split('T')[0],\r\n        reportedDate: new Date().toISOString().split('T')[0],\r\n        reporterId: null,\r\n        assignedToId: null,\r\n        financialLoss: 0,\r\n        rootCause: \"\",\r\n        immediateActions: \"\",\r\n        regulatoryNotificationRequired: true,\r\n        customerImpact: true,\r\n        customerImpactDescription: \"\",\r\n        affectedBusinessUnitIds: []\r\n      });\r\n      setSnackbar({ open: true, message: 'Incident added successfully', severity: 'success' });\r\n    } catch (error) {\r\n      setSnackbar({ open: true, message: 'Failed to add incident: ' + error.message, severity: 'error' });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Handle pagination\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  // Validate form\r\n  const validateForm = () => {\r\n    let valid = true;\r\n    const newErrors = { ...errors };\r\n    \r\n    if (!formData.title) { newErrors.title = true; valid = false; }\r\n    if (!formData.description) { newErrors.description = true; valid = false; }\r\n    if (!formData.categoryId) { newErrors.categoryId = true; valid = false; }\r\n    if (!formData.ownerId) { newErrors.ownerId = true; valid = false; }\r\n    \r\n    setErrors(newErrors);\r\n    return valid;\r\n  };\r\nconst handleNextTab = () => {\r\n    if (activeTab < 4) {\r\n      setActiveTab(prev => prev + 1);\r\n    } else {\r\n      setSnackbar({ open: true, message: 'You are already on the last tab', severity: 'info' });\r\n    }\r\n  };\r\n  const handlePreviousTab = () => {\r\n    if (activeTab > 0) {\r\n      setActiveTab(prev => prev - 1);\r\n    } else {\r\n      setSnackbar({ open: true, message: 'You are already on the first tab', severity: 'info' });\r\n    }\r\n  };\r\n  // Save as draft\r\n  const handleSaveDraft = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      // get risk by id\r\n      const riskData = await fetchData(`/risks/${riskId}`);\r\n\r\n      await putData(`/risks/update`, {\r\n        ...formData,\r\n        status: 'DRAFT'\r\n      });\r\n      setSnackbar({ open: true, message: 'Draft saved successfully', severity: 'success' });\r\n    } catch (error) {\r\n      setSnackbar({ open: true, message: 'Failed to save draft: ' + error.message, severity: 'error' });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Submit risk\r\n  const handleSubmit = async () => {\r\n    if (!validateForm()) {\r\n      setSnackbar({ open: true, message: 'Please fill all required fields', severity: 'error' });\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      setIsLoading(true);\r\n      await putData(`/risks/update`, {\r\n        ...formData,\r\n        status: 'IDENTIFIED'\r\n      });\r\n      setSnackbar({ open: true, message: 'Risk submitted successfully', severity: 'success' });\r\n      router.push('/risk-managment');\r\n    } catch (error) {\r\n      setSnackbar({ open: true, message: 'Failed to submit risk: ' + error.message, severity: 'error' });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleCloseSnackbar = () => {\r\n    setSnackbar({ ...snackbar, open: false });\r\n  };\r\n\r\n  const handleTabChange = (event, newValue) => {\r\n    setActiveTab(newValue);\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ width: '100%', p: 3 }}>\r\n      <Paper elevation={3} sx={{ p: 3 }}>\r\n       \r\n           <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 4, mb:5 }}>\r\n     <Typography variant=\"h5\" gutterBottom>\r\n          {formData.riskId ? `Risk: ${formData.riskId}` : 'Create New Risk'}\r\n        </Typography>\r\n          \r\n          <Box sx={{ display: 'flex', gap: 2 }}>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              onClick={handleSaveDraft}\r\n              startIcon={<IconDeviceFloppy size=\"1.1rem\" />}\r\n              disabled={isLoading}\r\n            >\r\n              {isLoading ? 'Saving...' : 'Save Draft'}\r\n            </Button>\r\n            \r\n            <Button\r\n              variant=\"contained\"\r\n              onClick={handleSubmit}\r\n              startIcon={<IconCheck size=\"1.1rem\" />}\r\n              disabled={isLoading}\r\n            >\r\n              {isLoading ? 'Submitting...' : 'Submit Risk'}\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n        <Tabs \r\n          value={activeTab} \r\n          onChange={handleTabChange} \r\n          variant=\"scrollable\"\r\n          scrollButtons=\"auto\"\r\n          allowScrollButtonsMobile\r\n          sx={{ mb: 3 }}\r\n        >\r\n          <Tab label=\"Basic Information\" />\r\n          <Tab label=\"Risk Assessment\" />\r\n          <Tab label=\"Associated Controls\" />\r\n          <Tab label=\"Related Incidents\" />\r\n          <Tab label=\"Affected Units\" />\r\n        </Tabs>\r\n        \r\n        {/* Basic Information */}\r\n        {activeTab === 0 && (\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12}>\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                Basic Information\r\n              </Typography>\r\n              <Divider sx={{ mb: 3 }} />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} md={6}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Risk Title *\"\r\n                value={formData.title}\r\n                onChange={handleChange('title')}\r\n                error={errors.title}\r\n                helperText={errors.title ? 'Title is required' : ''}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} md={6}>\r\n              <FormControl fullWidth error={errors.categoryId}>\r\n                <InputLabel>Category *</InputLabel>\r\n                <Select\r\n                  value={formData.categoryId}\r\n                  label=\"Category *\"\r\n                  onChange={handleChange('categoryId')}\r\n                >\r\n                  {riskCategories.map((category) => (\r\n                    <MenuItem key={category.id} value={category.id}>\r\n                      {category.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                {errors.categoryId && <Typography variant=\"caption\" color=\"error\">Category is required</Typography>}\r\n              </FormControl>\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} md={6}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Type</InputLabel>\r\n                <Select\r\n                  value={formData.type}\r\n                  label=\"Type\"\r\n                  onChange={handleChange('type')}\r\n                >\r\n                  <MenuItem value=\"STRATEGIC\">Strategic</MenuItem>\r\n                  <MenuItem value=\"OPERATIONAL\">Operational</MenuItem>\r\n                  <MenuItem value=\"FINANCIAL\">Financial</MenuItem>\r\n                  <MenuItem value=\"COMPLIANCE\">Compliance</MenuItem>\r\n                  <MenuItem value=\"TECHNOLOGY\">Technology</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} md={6}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Priority</InputLabel>\r\n                <Select\r\n                  value={formData.priority}\r\n                  label=\"Priority\"\r\n                  onChange={handleChange('priority')}\r\n                >\r\n                  <MenuItem value=\"CRITICAL\">Critical</MenuItem>\r\n                  <MenuItem value=\"HIGH\">High</MenuItem>\r\n                  <MenuItem value=\"MEDIUM\">Medium</MenuItem>\r\n                  <MenuItem value=\"LOW\">Low</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n             <Grid item xs={12} md={6}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Primary Risk</InputLabel>\r\n                <Select\r\n                  value={formData.primaryRisk}\r\n                  label=\"Primary Risk\"\r\n                  onChange={handleChange('primaryRisk')}\r\n                >\r\n                 {\r\n                  primaryRisk.map((risk) => (\r\n                    <MenuItem key={risk} value={risk}>\r\n                      {risk.replace(/_/g, ' ').toLowerCase().replace(/\\b\\w/g, c => c.toUpperCase())}\r\n                    </MenuItem>\r\n                  ))\r\n                 }\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n             <Grid item xs={12} md={6}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Secondary Risk</InputLabel>\r\n                <Select\r\n                  value={formData.secondaryRisk}\r\n                  label=\"Secondary Risk\"\r\n                  onChange={handleChange('secondaryRisk')}\r\n                >\r\n                  {\r\n                    secondaryRisk.map((risk) => (\r\n                      <MenuItem key={risk} value={risk}>\r\n                        {risk.replace(/_/g, ' ').toLowerCase().replace(/\\b\\w/g, c => c.toUpperCase())}\r\n                      </MenuItem>\r\n                    ))\r\n\r\n                  }\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n             <Grid item xs={12} md={6}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Tertiary Risk</InputLabel>\r\n                <Select\r\n                  value={formData.tertiaryRisk}\r\n                  label=\"Tertiary Risk\"\r\n                  onChange={handleChange('tertiaryRisk')}\r\n                >\r\n               {\r\n                  tertiaryRisk.map((risk) => (\r\n                    <MenuItem key={risk} value={risk}>\r\n                      {risk.replace(/_/g, ' ').toLowerCase().replace(/\\b\\w/g, c => c.toUpperCase())}\r\n                    </MenuItem>\r\n                  ))\r\n               }\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} md={6}>\r\n              <FormControl fullWidth error={errors.ownerId}>\r\n                <InputLabel>Owner *</InputLabel>\r\n                <Select\r\n                  value={formData.ownerId}\r\n                  label=\"Owner *\"\r\n                  onChange={handleChange('ownerId')}\r\n                >\r\n                  {users.map((user) => (\r\n                    <MenuItem key={user.id} value={user.id}>\r\n                      <Box display=\"flex\" alignItems=\"center\">\r\n                        <Avatar sx={{ width: 24, height: 24, mr: 1, fontSize: '0.75rem' }}>\r\n                          {user.firstName?.[0]}{user.lastName?.[0]}\r\n                        </Avatar>\r\n                        {user.firstName} {user.lastName} ({user.jobTitle})\r\n                      </Box>\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                {errors.ownerId && <Typography variant=\"caption\" color=\"error\">Owner is required</Typography>}\r\n              </FormControl>\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} md={6}>\r\n              <TextField\r\n                fullWidth\r\n                type=\"date\"\r\n                label=\"Identified Date\"\r\n                InputLabelProps={{ shrink: true }}\r\n                value={formData.identifiedDate}\r\n                onChange={handleChange('identifiedDate')}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                multiline\r\n                rows={4}\r\n                label=\"Description *\"\r\n                value={formData.description}\r\n                onChange={handleChange('description')}\r\n                error={errors.description}\r\n                helperText={errors.description ? 'Description is required' : ''}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12}>\r\n              <FormGroup row>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox \r\n                      checked={formData.regulatoryRequirement}\r\n                      onChange={handleChange('regulatoryRequirement')}\r\n                    />\r\n                  }\r\n                  label=\"Regulatory Requirement\"\r\n                />\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox \r\n                      checked={formData.complianceRelated}\r\n                      onChange={handleChange('complianceRelated')}\r\n                    />\r\n                  }\r\n                  label=\"Compliance Related\"\r\n                />\r\n              </FormGroup>\r\n            </Grid>\r\n          </Grid>\r\n        )}\r\n        \r\n        {/* Risk Assessment */}\r\n        {activeTab === 1 && (\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12}>\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                Risk Assessment\r\n              </Typography>\r\n              <Divider sx={{ mb: 3 }} />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} md={6}>\r\n              <Typography variant=\"subtitle1\" gutterBottom>\r\n                Inherent Risk Assessment\r\n              </Typography>\r\n              <PBTRiskMatrix onChange={handleRiskRatingResult}/>\r\n{/*               \r\n              <Box sx={{ mb: 2 }}>\r\n                <Typography variant=\"body2\" gutterBottom>\r\n                  Probability (1-100): {formData.inherentProbability}\r\n                </Typography>\r\n                <Slider\r\n                  value={formData.inherentProbability}\r\n                  onChange={handleChange('inherentProbability')}\r\n                  min={1}\r\n                  max={100}\r\n                  valueLabelDisplay=\"auto\"\r\n                />\r\n              </Box> */}\r\n{/*               \r\n              <Box sx={{ mb: 2 }}>\r\n                <Typography variant=\"body2\" gutterBottom>\r\n                  Impact (1-100): {formData.inherentImpact}\r\n                </Typography>\r\n                <Slider\r\n                  value={formData.inherentImpact}\r\n                  onChange={handleChange('inherentImpact')}\r\n                  min={1}\r\n                  max={100}\r\n                  valueLabelDisplay=\"auto\"\r\n                />\r\n              </Box> */}\r\n              \r\n              {/* <Box sx={{ mb: 2 }}>\r\n                <Typography variant=\"body2\">Risk Rating: {formData.inherentProbability}</Typography>\r\n                <Chip\r\n                  label={calculateRiskRating()}\r\n                  color={\r\n                    calculateRiskRating() === 'CRITICAL' ? 'error' :\r\n                    calculateRiskRating() === 'HIGH' ? 'warning' :\r\n                    calculateRiskRating() === 'MEDIUM' ? 'info' : 'success'\r\n                  }\r\n                  sx={{ fontWeight: 'bold' }}\r\n                />\r\n              </Box> */}\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} md={6}>\r\n              <Typography variant=\"subtitle1\" gutterBottom>\r\n                Financial Impact\r\n              </Typography>\r\n              \r\n              <TextField\r\n                fullWidth\r\n                type=\"number\"\r\n                label=\"Potential Financial Impact\"\r\n                value={formData.potentialFinancialImpact}\r\n                onChange={handleChange('potentialFinancialImpact')}\r\n                sx={{ mb: 2 }}\r\n                InputProps={{\r\n                  startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\r\n                }}\r\n              />\r\n              \r\n              <FormControl fullWidth sx={{ mb: 2 }}>\r\n                <InputLabel>Currency</InputLabel>\r\n                <Select\r\n                  value={formData.currency}\r\n                  label=\"Currency\"\r\n                  onChange={handleChange('currency')}\r\n                >\r\n                  <MenuItem value=\"USD\">USD</MenuItem>\r\n                  <MenuItem value=\"EUR\">EUR</MenuItem>\r\n                  <MenuItem value=\"GBP\">GBP</MenuItem>\r\n                  <MenuItem value=\"ZAR\">ZAR</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n              \r\n              <TextField\r\n                fullWidth\r\n                type=\"date\"\r\n                label=\"Next Assessment Date\"\r\n                InputLabelProps={{ shrink: true }}\r\n                value={formData.nextAssessmentDate}\r\n                onChange={handleChange('nextAssessmentDate')}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                multiline\r\n                rows={3}\r\n                label=\"Root Cause\"\r\n                value={formData.rootCause}\r\n                onChange={handleChange('rootCause')}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                multiline\r\n                rows={3}\r\n                label=\"Consequences\"\r\n                value={formData.consequences}\r\n                onChange={handleChange('consequences')}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                multiline\r\n                rows={3}\r\n                label=\"Assumptions\"\r\n                value={formData.assumptions}\r\n                onChange={handleChange('assumptions')}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                multiline\r\n                rows={3}\r\n                label=\"External Factors\"\r\n                value={formData.externalFactors}\r\n                onChange={handleChange('externalFactors')}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        )}\r\n        \r\n        {/* Associated Controls */}\r\n        {activeTab === 2 && (\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12}>\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                Associated Controls\r\n              </Typography>\r\n              <Divider sx={{ mb: 2 }} />\r\n              \r\n              <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\r\n                <TextField\r\n                  size=\"small\"\r\n                  placeholder=\"Search controls...\"\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <IconSearch size=\"1rem\" />\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                />\r\n                <Button\r\n                  variant=\"outlined\"\r\n                  startIcon={<IconPlus size=\"1rem\" />}\r\n                  onClick={() => setOpenControlModal(true)}\r\n                >\r\n                  Add New Control\r\n                </Button>\r\n              </Box>\r\n              \r\n              <TableContainer component={Paper}>\r\n                <Table>\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          indeterminate={\r\n                            formData.controlIds.length > 0 &&\r\n                            formData.controlIds.length < controls.length\r\n                          }\r\n                          checked={\r\n                            controls.length > 0 &&\r\n                            formData.controlIds.length === controls.length\r\n                          }\r\n                          onChange={(e) => {\r\n                            if (e.target.checked) {\r\n                              setFormData(prev => ({\r\n                                ...prev,\r\n                                controlIds: controls.map(control => control.id)\r\n                              }));\r\n                            } else {\r\n                              setFormData(prev => ({\r\n                                ...prev,\r\n                                controlIds: []\r\n                              }));\r\n                            }\r\n                          }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell>Name</TableCell>\r\n                      <TableCell>Type</TableCell>\r\n                      <TableCell>Nature</TableCell>\r\n                      <TableCell>Effectiveness</TableCell>\r\n                      <TableCell>Owner</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {controls\r\n                      .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                      .map((control) => (\r\n                        <TableRow key={control.id}>\r\n                          <TableCell padding=\"checkbox\">\r\n                            <Checkbox\r\n                              checked={formData.controlIds.includes(control.id)}\r\n                              onChange={() => handleControlSelect(control.id)}\r\n                            />\r\n                          </TableCell>\r\n                          <TableCell>{control.name}</TableCell>\r\n                          <TableCell>{control.controlType}</TableCell>\r\n                          <TableCell>{control.controlNature}</TableCell>\r\n                          <TableCell>\r\n                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                              <Box sx={{ width: '100%', mr: 1 }}>\r\n                                <LinearProgress \r\n                                  variant=\"determinate\" \r\n                                  value={control.effectiveness} \r\n                                  color={\r\n                                    control.effectiveness >= 80 ? 'success' :\r\n                                    control.effectiveness >= 50 ? 'warning' : 'error'\r\n                                  }\r\n                                />\r\n                              </Box>\r\n                              <Typography variant=\"body2\">{control.effectiveness}%</Typography>\r\n                            </Box>\r\n                          </TableCell>\r\n                          <TableCell>\r\n                            {users.find(u => u.id === control.ownerId)?.firstName || 'Unassigned'}\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      ))}\r\n                  </TableBody>\r\n                </Table>\r\n                <TablePagination\r\n                  rowsPerPageOptions={[5, 10, 25]}\r\n                  component=\"div\"\r\n                  count={controls.length}\r\n                  rowsPerPage={rowsPerPage}\r\n                  page={page}\r\n                  onPageChange={handleChangePage}\r\n                  onRowsPerPageChange={handleChangeRowsPerPage}\r\n                />\r\n              </TableContainer>\r\n            </Grid>\r\n          </Grid>\r\n        )}\r\n        \r\n        {/* Related Incidents */}\r\n        {activeTab === 3 && (\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12}>\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                Related Incidents\r\n              </Typography>\r\n              <Divider sx={{ mb: 2 }} />\r\n              \r\n              <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\r\n                <TextField\r\n                  size=\"small\"\r\n                  placeholder=\"Search incidents...\"\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <IconSearch size=\"1rem\" />\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                />\r\n                <Button\r\n                  variant=\"outlined\"\r\n                  startIcon={<IconPlus size=\"1rem\" />}\r\n                  onClick={() => setOpenIncidentModal(true)}\r\n                >\r\n                  Add New Incident\r\n                </Button>\r\n              </Box>\r\n              \r\n              <TableContainer component={Paper}>\r\n                <Table>\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          indeterminate={\r\n                            formData.incidentIds.length > 0 &&\r\n                            formData.incidentIds.length < incidents.length\r\n                          }\r\n                          checked={\r\n                            incidents.length > 0 &&\r\n                            formData.incidentIds.length === incidents.length\r\n                          }\r\n                          onChange={(e) => {\r\n                            if (e.target.checked) {\r\n                              setFormData(prev => ({\r\n                                ...prev,\r\n                                incidentIds: incidents.map(incident => incident.id)\r\n                              }));\r\n                            } else {\r\n                              setFormData(prev => ({\r\n                                ...prev,\r\n                                incidentIds: []\r\n                              }));\r\n                            }\r\n                          }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell>Title</TableCell>\r\n                      <TableCell>Severity</TableCell>\r\n                      <TableCell>Date</TableCell>\r\n                      <TableCell>Financial Loss</TableCell>\r\n                      <TableCell>Status</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {incidents\r\n                      .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                      .map((incident) => (\r\n                        <TableRow key={incident.id}>\r\n                          <TableCell padding=\"checkbox\">\r\n                            <Checkbox\r\n                              checked={formData.incidentIds.includes(incident.id)}\r\n                              onChange={() => handleIncidentSelect(incident.id)}\r\n                            />\r\n                          </TableCell>\r\n                          <TableCell>{incident.title}</TableCell>\r\n                          <TableCell>\r\n                            <Chip\r\n                              label={incident.severity}\r\n                              size=\"small\"\r\n                              color={\r\n                                incident.severity === 'CRITICAL' ? 'error' :\r\n                                incident.severity === 'HIGH' ? 'warning' :\r\n                                incident.severity === 'MEDIUM' ? 'info' : 'success'\r\n                              }\r\n                            />\r\n                          </TableCell>\r\n                          <TableCell>\r\n                            {new Date(incident.incidentDate).toLocaleDateString()}\r\n                          </TableCell>\r\n                          <TableCell>\r\n                            ${incident.financialLoss?.toLocaleString() || '0'}\r\n                          </TableCell>\r\n                          <TableCell>{incident.status}</TableCell>\r\n                        </TableRow>\r\n                      ))}\r\n                  </TableBody>\r\n                </Table>\r\n                <TablePagination\r\n                  rowsPerPageOptions={[5, 10, 25]}\r\n                  component=\"div\"\r\n                  count={incidents.length}\r\n                  rowsPerPage={rowsPerPage}\r\n                  page={page}\r\n                  onPageChange={handleChangePage}\r\n                  onRowsPerPageChange={handleChangeRowsPerPage}\r\n                />\r\n              </TableContainer>\r\n            </Grid>\r\n          </Grid>\r\n        )}\r\n        \r\n        {/* Affected Business Units */}\r\n        {activeTab === 4 && (\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12}>\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                Affected Business Units\r\n              </Typography>\r\n              <Divider sx={{ mb: 2 }} />\r\n              \r\n              <TableContainer component={Paper}>\r\n                <Table>\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          indeterminate={\r\n                            formData.affectedBusinessUnitIds.length > 0 &&\r\n                            formData.affectedBusinessUnitIds.length < businessUnits.length\r\n                          }\r\n                          checked={\r\n                            businessUnits.length > 0 &&\r\n                            formData.affectedBusinessUnitIds.length === businessUnits.length\r\n                          }\r\n                          onChange={(e) => {\r\n                            if (e.target.checked) {\r\n                              setFormData(prev => ({\r\n                                ...prev,\r\n                                affectedBusinessUnitIds: businessUnits.map(unit => unit.id)\r\n                              }));\r\n                            } else {\r\n                              setFormData(prev => ({\r\n                                ...prev,\r\n                                affectedBusinessUnitIds: []\r\n                              }));\r\n                            }\r\n                          }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell>Name</TableCell>\r\n                      <TableCell>Code</TableCell>\r\n                      <TableCell>Manager</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {businessUnits\r\n                      .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                      .map((unit) => (\r\n                        <TableRow key={unit.id}>\r\n                          <TableCell padding=\"checkbox\">\r\n                            <Checkbox\r\n                              checked={formData.affectedBusinessUnitIds.includes(unit.id)}\r\n                              onChange={() => handleBusinessUnitSelect(unit.id)}\r\n                            />\r\n                          </TableCell>\r\n                          <TableCell>{unit.name}</TableCell>\r\n                          <TableCell>{unit.code}</TableCell>\r\n                          <TableCell>\r\n                            {users.find(u => u.id === unit.managerId)?.firstName || 'Unassigned'}\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      ))}\r\n                  </TableBody>\r\n                </Table>\r\n                <TablePagination\r\n                  rowsPerPageOptions={[5, 10, 25]}\r\n                  component=\"div\"\r\n                  count={businessUnits.length}\r\n                  rowsPerPage={rowsPerPage}\r\n                  page={page}\r\n                  onPageChange={handleChangePage}\r\n                  onRowsPerPageChange={handleChangeRowsPerPage}\r\n                />\r\n              </TableContainer>\r\n            </Grid>\r\n          </Grid>\r\n        )}\r\n        \r\n        {/* Action buttons */}\r\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 4 }}>\r\n          <Button\r\n            variant=\"outlined\"\r\n            onClick={() => router.push('/risk-management')}\r\n            startIcon={<IconArrowLeft size=\"1.1rem\" />}\r\n            disabled={isLoading}\r\n          >\r\n            Cancel\r\n          </Button>\r\n          \r\n          <Box sx={{ display: 'flex', gap: 2 }}>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              onClick={handlePreviousTab}\r\n              startIcon={<IconArrowLeft size=\"1.1rem\" />}\r\n              disabled={activeTab === 0 || isLoading}\r\n            >\r\n              Previous\r\n            </Button>\r\n            \r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              onClick={handleNextTab}\r\n              startIcon={<IconArrowRight size=\"1.1rem\" />}\r\n              disabled={activeTab === 4 || isLoading}\r\n            >\r\n             Next\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n      </Paper>\r\n      \r\n      {/* Add Control Modal */}\r\n      <Dialog open={openControlModal} onClose={() => setOpenControlModal(false)} maxWidth=\"sm\" fullWidth>\r\n        <DialogTitle>Add New Control</DialogTitle>\r\n        <DialogContent>\r\n          <Grid container spacing={2} sx={{ mt: 1 }}>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Control Name\"\r\n                value={newControl.name}\r\n                onChange={(e) => setNewControl({ ...newControl, name: e.target.value })}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                multiline\r\n                rows={3}\r\n                label=\"Description\"\r\n                value={newControl.description}\r\n                onChange={(e) => setNewControl({ ...newControl, description: e.target.value })}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} md={6}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Control Type</InputLabel>\r\n                <Select\r\n                  value={newControl.controlType}\r\n                  label=\"Control Type\"\r\n                  onChange={(e) => setNewControl({ ...newControl, controlType: e.target.value })}\r\n                >\r\n                  <MenuItem value=\"PREVENTIVE\">Preventive</MenuItem>\r\n                  <MenuItem value=\"DETECTIVE\">Detective</MenuItem>\r\n                  <MenuItem value=\"CORRECTIVE\">Corrective</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs={12} md={6}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Control Nature</InputLabel>\r\n                <Select\r\n                  value={newControl.controlNature}\r\n                  label=\"Control Nature\"\r\n                  onChange={(e) => setNewControl({ ...newControl, controlNature: e.target.value })}\r\n                >\r\n                  <MenuItem value=\"MANUAL\">Manual</MenuItem>\r\n                  <MenuItem value=\"AUTOMATED\">Automated</MenuItem>\r\n                  <MenuItem value=\"IT_DEPENDENT\">IT Dependent</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n{/* Add other new fields */}\r\n<Grid item xs={12}>\r\n              <TextField \r\n                fullWidth\r\n                label=\"Implementation Date\"\r\n                type=\"date\"\r\n                InputLabelProps={{ shrink: true }}\r\n                value={newControl.implementationDate}\r\n                onChange={(e) => setNewControl({ ...newControl, implementationDate: e.target.value })}\r\n              />\r\n            </Grid>\r\n<Grid item xs={12}>\r\n\r\n              <TextField\r\n                fullWidth\r\n                label=\"Review Date\"\r\n                type=\"date\"\r\n                InputLabelProps={{ shrink: true }}\r\n                value={newControl.reviewDate}\r\n                onChange={(e) => setNewControl({ ...newControl, reviewDate: e.target.value })}\r\n                />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Last Tested Date\"\r\n                type=\"date\"\r\n                InputLabelProps={{ shrink: true }}\r\n                value={newControl.lastTestedDate}\r\n                onChange={(e) => setNewControl({ ...newControl, lastTestedDate: e.target.value })}\r\n                />\r\n                </Grid>\r\n<Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Next Test Date\"\r\n                type=\"date\"\r\n                InputLabelProps={{ shrink: true }}\r\n                value={newControl.nextTestDate}\r\n                onChange={(e) => setNewControl({ ...newControl, nextTestDate: e.target.value })}\r\n                />\r\n\r\n</Grid>\r\n<Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Testing Frequency\"\r\n                value={newControl.testingFrequency}\r\n                onChange={(e) => setNewControl({ ...newControl, testingFrequency: e.target.value })}\r\n                />\r\n</Grid>\r\n<Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Testing Method\"\r\n                value={newControl.testingMethod}\r\n                onChange={(e) => setNewControl({ ...newControl, testingMethod: e.target.value })}\r\n                />\r\n            </Grid>\r\n<Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Testing Results\"\r\n                value={newControl.testingResults}\r\n                onChange={(e) => setNewControl({ ...newControl, testingResults: e.target.value })}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField \r\n                fullWidth\r\n                label=\"Testing Notes\"\r\n                value={newControl.testingNotes}\r\n                onChange={(e) => setNewControl({ ...newControl, testingNotes: e.target.value })}\r\n                />\r\n                </Grid>\r\n\r\n            <Grid item xs={12}>\r\n              <Typography variant=\"body2\" gutterBottom>\r\n                Effectiveness: {newControl.effectiveness}%\r\n              </Typography>\r\n              <Slider\r\n                value={newControl.effectiveness}\r\n                onChange={(e, value) => setNewControl({ ...newControl, effectiveness: value })}\r\n                min={1}\r\n                max={100}\r\n                valueLabelDisplay=\"auto\"\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Owner</InputLabel>\r\n                <Select\r\n                  value={newControl.ownerId}\r\n                  label=\"Owner\"\r\n                  onChange={(e) => setNewControl({ ...newControl, ownerId: e.target.value })}\r\n                >\r\n                  {users.map((user) => (\r\n                    <MenuItem key={user.id} value={user.id}>\r\n                      {user.firstName} {user.lastName}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setOpenControlModal(false)}>Cancel</Button>\r\n          <Button \r\n            onClick={handleAddControl}\r\n            variant=\"contained\"\r\n            disabled={!newControl.name || isLoading}\r\n          >\r\n            {isLoading ? 'Adding...' : 'Add Control'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Add Incident Modal */}\r\n      <Dialog open={openIncidentModal} onClose={() => setOpenIncidentModal(false)} maxWidth=\"sm\" fullWidth>\r\n        <DialogTitle>Add New Incident</DialogTitle>\r\n        <DialogContent>\r\n          <Grid container spacing={2} sx={{ mt: 1 }}>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                                label=\"Title\"\r\n                value={newIncident.title}\r\n                onChange={(e) => setNewIncident({ ...newIncident, title: e.target.value })}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                multiline\r\n                rows={3}\r\n                label=\"Description\"\r\n                value={newIncident.description}\r\n                onChange={(e) => setNewIncident({ ...newIncident, description: e.target.value })}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} md={6}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Severity</InputLabel>\r\n                <Select\r\n                  value={newIncident.severity}\r\n                  label=\"Severity\"\r\n                  onChange={(e) => setNewIncident({ ...newIncident, severity: e.target.value })}\r\n                >\r\n                  <MenuItem value=\"CRITICAL\">Critical</MenuItem>\r\n                  <MenuItem value=\"HIGH\">High</MenuItem>\r\n                  <MenuItem value=\"MEDIUM\">Medium</MenuItem>\r\n                  <MenuItem value=\"LOW\">Low</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs={12} md={6}>\r\n              <TextField\r\n                fullWidth\r\n                type=\"number\"\r\n                label=\"Financial Loss\"\r\n                value={newIncident.financialLoss}\r\n                onChange={(e) => setNewIncident({ ...newIncident, financialLoss: e.target.value })}\r\n                InputProps={{\r\n                  startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} md={6}>\r\n              <TextField\r\n                fullWidth\r\n                type=\"date\"\r\n                label=\"Incident Date\"\r\n                InputLabelProps={{ shrink: true }}\r\n                value={newIncident.incidentDate}\r\n                onChange={(e) => setNewIncident({ ...newIncident, incidentDate: e.target.value })}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} md={6}>\r\n              <TextField\r\n                fullWidth\r\n                type=\"date\"\r\n                label=\"Detected Date\"\r\n                InputLabelProps={{ shrink: true }}\r\n                value={newIncident.detectedDate}\r\n                onChange={(e) => setNewIncident({ ...newIncident, detectedDate: e.target.value })}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Status</InputLabel>\r\n                <Select\r\n                  value={newIncident.status}\r\n                  label=\"Status\"\r\n                  onChange={(e) => setNewIncident({ ...newIncident, status: e.target.value })}\r\n                >\r\n                {\r\n                  incidentStatuses.map((status) => (\r\n                    <MenuItem key={status} value={status}>\r\n                      {status.charAt(0).toUpperCase() + status.slice(1)}\r\n                    </MenuItem>\r\n                  ))\r\n                }\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                type=\"date\"\r\n                label=\"Reported Date\"\r\n                InputLabelProps={{ shrink: true }}\r\n                value={newIncident.reportedDate}\r\n                onChange={(e) => setNewIncident({ ...newIncident, reportedDate: e.target.value })}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n              multiline\r\n                rows={3}\r\n                fullWidth\r\n                label=\"Root Cause\"\r\n                value={newIncident.rootCause}\r\n                onChange={(e) => setNewIncident({ ...newIncident, rootCause: e.target.value })}\r\n              />\r\n            </Grid>\r\n        <Grid item xs={12}>\r\n              <TextField\r\n              multiline\r\n                rows={3}\r\n                fullWidth\r\n                label=\"Immediate Actions\"\r\n                value={newIncident.immediateActions}\r\n                onChange={(e) => setNewIncident({ ...newIncident, immediateActions: e.target.value })}\r\n              />\r\n            </Grid>\r\n            {/* rEGULATORY  notification checkbox */}\r\n            <Grid item xs={12} md={6}>\r\n              <FormControlLabel\r\n                control={\r\n                  <Checkbox \r\n                    checked={newIncident.regulatoryNotification}\r\n                    onChange={(e) => setNewIncident({ ...newIncident, regulatoryNotification: e.target.checked })}\r\n                  />\r\n                }\r\n                label=\"Regulatory Notification Required\"\r\n              />\r\n            </Grid>\r\n            {/* Customer impact notification */}\r\n            <Grid item xs={12} md={6}>\r\n              <FormControlLabel\r\n                control={\r\n                  <Checkbox \r\n                    checked={newIncident.customerImpactNotification}\r\n                    onChange={(e) => setNewIncident({ ...newIncident, customerImpactNotification: e.target.checked })}\r\n                  />\r\n                }\r\n                label=\"Customer Impact Notification Required\"\r\n              />\r\n              </Grid>\r\n              {/* customer Impact Description */}\r\n              <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                multiline\r\n                rows={3}\r\n                label=\"Customer Impact Description\"\r\n                value={newIncident.customerImpactDescription}\r\n                onChange={(e) => setNewIncident({ ...newIncident, customerImpactDescription: e.target.value })}\r\n              />\r\n            </Grid>\r\n              {/* Affected Business Units */}\r\n              <Grid item xs={12}>\r\n                <FormControl fullWidth>\r\n                  <InputLabel>Affected Business Units</InputLabel>\r\n                  <Select\r\n                    multiple\r\n                    value={newIncident.affectedBusinessUnitIds}\r\n                    onChange={(e) => setNewIncident({ ...newIncident, affectedBusinessUnitIds: e.target.value })}\r\n                    renderValue={(selected) => \r\n                      selected.map(id => businessUnits.find(unit => unit.id === id)?.name).join(', ')\r\n                    }\r\n                  >\r\n                    {businessUnits.map((unit) => (\r\n                      <MenuItem key={unit.id} value={unit.id}>\r\n                        <Checkbox\r\n                          checked={newIncident.affectedBusinessUnitIds.includes(unit.id)}\r\n                        />\r\n                        <ListItemText primary={unit.name} />\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n\r\n\r\n                \r\n            <Grid item xs={12}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Reporter</InputLabel>\r\n                <Select\r\n                  value={newIncident.reporterId}\r\n                  label=\"Reporter\"\r\n                  onChange={(e) => setNewIncident({ ...newIncident, reporterId: e.target.value })}\r\n                >\r\n                  {users.map((user) => (\r\n                    <MenuItem key={user.id} value={user.id}>\r\n                      {user.firstName} {user.lastName}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setOpenIncidentModal(false)}>Cancel</Button>\r\n          <Button \r\n            onClick={handleAddIncident}\r\n            variant=\"contained\"\r\n            disabled={!newIncident.title || isLoading}\r\n          >\r\n            {isLoading ? 'Adding...' : 'Add Incident'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Snackbar for notifications */}\r\n      <Snackbar\r\n        open={snackbar.open}\r\n        autoHideDuration={6000}\r\n        onClose={handleCloseSnackbar}\r\n        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      >\r\n        <Alert \r\n          onClose={handleCloseSnackbar} \r\n          severity={snackbar.severity}\r\n          sx={{ width: '100%' }}\r\n        >\r\n          {snackbar.message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default AddRiskForm;"],"names":[],"mappings":"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"}},
    {"offset": {"line": 4332, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}